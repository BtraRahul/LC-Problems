class Solution {
    // [3,1,5,8]
    // [1,3,1,5,8,1]  0
    // [1,3,5,8,1]   15
    // [1,3,8,1]  15 + 120
    // [1,8,1]  15 + 120 +24
    // [1,1]  15 + 120 + 24 + 8
    vector<vector<int>> dp;

public:
    int helper(int start, int end, vector<int>& nums) {
        int ans = 0;
        if (start > end)
            return 0;

        if (dp[start][end] != -1)
            return dp[start][end];

        for (int k = start; k < end; k++) {
            int val = nums[start - 1] * nums[k] * nums[end];
            val += helper(start, k, nums) + helper(k + 1, end, nums);
            ans = max(ans, val);
        }
        
        return dp[start][end] = ans;
    }
    int maxCoins(vector<int>& nums) {
        int n = nums.size();
        nums.push_back(1);
        nums.insert(nums.begin(), 1);
        cout << nums.size() << endl;

        dp.resize(n + 3, vector<int>(n + 3, -1));
        return helper(1, nums.size() - 1, nums);
    }
};