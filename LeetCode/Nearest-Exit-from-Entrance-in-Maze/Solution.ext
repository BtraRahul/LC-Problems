class Solution {
    int dxdy[4][2] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};

public:
    // ["+",".","+","+","+","+","+"]
    // ["+",".","+",".",".",".","+"]
    // ["+",".","+",".","+",".","+"]
    // ["+",".",".",".","+",".","+"]
    // ["+","+","+","+","+",".","+"]
    bool inline valid(int i, int j, int m, int n) {
        return i >= 0 && j >= 0 && i < m && j < n;
    }

    bool inline exit(int i, int j, int m, int n) {
        return (i == 0 || i == m - 1 || j == 0 || j == n - 1);
    }
    bool ispossible(auto& maze) {
        int m = maze.size();
        int n = maze[0].size();

        for (int i = 0; i < m; i++) {
            if (maze[i][0] == '.' || maze[i][n - 1] == '.')
                return true;
        }
        for (int i = 0; i < n; i++) {
            if (maze[0][i] == '.' || maze[m - 1][i] == '.')
                return true;
        }
        return false;
    }
    int nearestExit(vector<vector<char>>& maze, vector<int>& entrance) {
        int m = maze.size(), n = maze[0].size();
        int sx = entrance[0], sy = entrance[1];

        if (!ispossible(maze))
            return -1;

        queue<pair<pair<int, int>, int>> q;

        q.push({{sx, sy}, 0});

        while (q.size()) {
            auto f = q.front();
            q.pop();
            int dist = f.second;
            int x = f.first.first;
            int y = f.first.second;

            maze[x][y] = '+';

            if (dist && exit(x, y, m, n))
                return dist;

            for (int i = 0; i < 4; i++) {
                int newX = x + dxdy[i][0];
                int newY = y + dxdy[i][1];

                if (!valid(newX, newY, m, n) || maze[newX][newY] == '+')
                    continue;
                if (exit(newX, newY, m, n))
                    return dist + 1;

                q.push({{newX, newY}, dist + 1});
                maze[newX][newY] = '+';
            }
        }

        return -1;
    }
};