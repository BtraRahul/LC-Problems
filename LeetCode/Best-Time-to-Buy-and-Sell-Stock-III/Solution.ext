class Solution {
    vector<vector<vector<int>>> memo;

public:
    int helper(int idx, int buy, auto& pr, int cap) {
        if (idx >= pr.size() || cap == 0)
            return 0;

        if (memo[idx][buy][cap] + 1)
            return memo[idx][buy][cap];
        if (buy) {
            return memo[idx][buy][cap] =
                       max(helper(idx + 1, 0, pr, cap) - pr[idx],
                           helper(idx + 1, 1, pr, cap));
        } else
            return memo[idx][buy][cap] =
                       max(helper(idx + 1, 1, pr, cap - 1) + pr[idx],
                           helper(idx + 1, 0, pr, cap));
    }
    int maxProfit(vector<int>& prices) {
        memo.resize(prices.size(), vector<vector<int>>(2, vector<int>(3, -1)));
        return helper(0, 1, prices, 2);
    }
};