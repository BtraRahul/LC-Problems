
class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n=graph.size();
        vector<vector<int>> adj(graph.size());
        for(int i=0;i<graph.size();i++){
            for(int j=0;j<graph[0].size();j++){
                if(i!=j && graph[i][j]){
                    adj[i].push_back(j);
                }
            }
        }

        sort(initial.begin(), initial.end());

        int min_infected=INT_MAX;
        int ans=0;
        vector<int> base(n,0);
        for(auto &i:initial){
            base[i]=1;
        }

        for(auto &i:initial){
            vector<int> dp=base;
            dp[i]=0;
            vector<int> isvisited(n,false);
            queue<int> Q;
            for(auto &node:initial){
                if(node!=i && isvisited[node]==false){
                    Q.push(node);
                    isvisited[node]=true;
                }
            }
            while(!Q.empty()){
                int node=Q.front();
                Q.pop();
                for(auto &edge:adj[node]){
                    if(!isvisited[edge] && i!=edge){
                        isvisited[edge]=true;
                        Q.push(edge);
                        dp[edge]=1;
                    }
                }
            }
            int s=accumulate(dp.begin(),dp.end(),0);
            if(s<min_infected){
                min_infected=s;
                ans=i;
            }
        }


        return ans;


    }
};